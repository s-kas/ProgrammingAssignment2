{
    "contents" : "## Matrix inversion is usually a costly computation and there may be some benefit\n## to caching the inverse of a matrix rather than computing it repeatedly (there\n## are also alternatives to matrix inversion that we will not discuss here).\n## This assignment is to write a pair of functions that cache the inverse of a matrix.\n\n## This function creates a special \"matrix\" object that can cache its inverse\n\nmakeCacheMatrix <- function(x = matrix()) {\n        inv <- NULL\n        set <- function(y) {\n                x <<- y\n                inv <<- NULL\n        }\n        get <- function() x\n        setinverse <- function(inverse) inv <<- inverse\n        getinverse <- function() inv\n        list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)\n}\n\n\n## This function computes the inverse of the special \"matrix\" returned by\n## makeCacheMatrix above\n\ncacheSolve <- function(x, ...) {\n        ## Return a matrix that is the inverse of 'x'\n        inv <- x$getinverse()\n        if(!is.null(inv)) {\n                message(\"getting cached data.\")\n                return(inv)\n        }\n        data <- x$get()\n        inv <- solve(data)\n        x$setinverse(inv)\n        inv\n}\n",
    "created" : 1443244887214.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "329855414",
    "id" : "703376EE",
    "lastKnownWriteTime" : 1443125516,
    "path" : "~/Coursera/RProgramming/ProgrammingAssignment2/cachematrix.R",
    "project_path" : "cachematrix.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}